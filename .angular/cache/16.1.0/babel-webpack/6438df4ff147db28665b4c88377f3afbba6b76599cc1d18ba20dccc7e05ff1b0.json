{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nclass PaymentComponent {\n  constructor(datePipe) {\n    this.datePipe = datePipe;\n    this.params = new Map();\n    this.dataToSign = '';\n  }\n  ngAfterViewInit() {\n    this.postToCyberSource();\n  }\n  // create a form for the post request\n  postToCyberSource() {\n    this.dateString();\n    const form = window.document.createElement('form');\n    form.setAttribute('method', 'post');\n    form.setAttribute('action', environment.endpoint);\n    form.setAttribute('target', 'sa_iframe');\n    // Add all the data to be posted as Hidden elements    \n    form.appendChild(this.createHiddenElement('access_key', environment.accessKey));\n    form.appendChild(this.createHiddenElement('profile_id', environment.profileId));\n    form.appendChild(this.createHiddenElement('transaction_uuid', this.uuid(16)));\n    form.appendChild(this.createHiddenElement('signed_field_names', environment.signedFieldNames));\n    form.appendChild(this.createHiddenElement('unsigned_field_names', environment.unsignedFieldNames));\n    form.appendChild(this.createHiddenElement('signed_date_time', this.dateString()));\n    form.appendChild(this.createHiddenElement('locale', 'en-US'));\n    form.appendChild(this.createHiddenElement('transaction_type', environment.transactionType));\n    form.appendChild(this.createHiddenElement('reference_number', '123456789'));\n    form.appendChild(this.createHiddenElement('amount', '25'));\n    form.appendChild(this.createHiddenElement('currency', 'usd'));\n    form.appendChild(this.createHiddenElement('signature', this.sign()));\n    window.document.body.appendChild(form);\n    form.submit();\n  }\n  // create the form\n  createHiddenElement(name, value) {\n    const hiddenField = document.createElement('input');\n    hiddenField.setAttribute('name', name);\n    hiddenField.setAttribute('value', value);\n    hiddenField.setAttribute('type', 'hidden');\n    this.params.set(name, value);\n    this.dataToSign += name + \"=\" + value + \",\";\n    return hiddenField;\n  }\n  dateString() {\n    const activationDate = this.getNowUTC();\n    return this.datePipe.transform(activationDate, 'yyyy-MM-ddTHH:mm:ss') + \"Z\";\n  }\n  getNowUTC() {\n    const now = new Date();\n    return new Date(now.getTime() + now.getTimezoneOffset() * 60000);\n  }\n  sign() {\n    this.dataToSign = this.dataToSign.substring(0, this.dataToSign.length - 1);\n    return this.signData(this.dataToSign, environment.SECRET_KEY);\n  }\n  signData(data, secretKey) {\n    const signatureString = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);\n    return signatureString;\n  }\n  uuid(lengthOfCode) {\n    const possible = \"abcde1234567890\";\n    let text = \"\";\n    for (let i = 0; i < lengthOfCode; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n}\nPaymentComponent.ɵfac = function PaymentComponent_Factory(t) {\n  return new (t || PaymentComponent)(i0.ɵɵdirectiveInject(i1.DatePipe));\n};\nPaymentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PaymentComponent,\n  selectors: [[\"app-payment\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[\"name\", \"sa_iframe\", \"src\", \"assets/iframe.jpg\", \"id\", \"sa_iframe\", \"height\", \"430\", \"width\", \"600\", \"scrolling\", \"yes\"]],\n  template: function PaymentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"iframe\", 0);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PaymentComponent };","map":{"version":3,"names":["environment","CryptoJS","PaymentComponent","constructor","datePipe","params","Map","dataToSign","ngAfterViewInit","postToCyberSource","dateString","form","window","document","createElement","setAttribute","endpoint","appendChild","createHiddenElement","accessKey","profileId","uuid","signedFieldNames","unsignedFieldNames","transactionType","sign","body","submit","name","value","hiddenField","set","activationDate","getNowUTC","transform","now","Date","getTime","getTimezoneOffset","substring","length","signData","SECRET_KEY","data","secretKey","signatureString","HmacSHA256","toString","enc","Base64","lengthOfCode","possible","text","i","charAt","Math","floor","random","i0","ɵɵdirectiveInject","i1","DatePipe","selectors","decls","vars","consts","template","PaymentComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\projects\\cybersource_sa_angular\\cybersource_sa\\src\\app\\payment\\payment.component.ts","C:\\projects\\cybersource_sa_angular\\cybersource_sa\\src\\app\\payment\\payment.component.html"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport { AfterViewInit, Component } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport * as CryptoJS from 'crypto-js';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss']\n})\nexport class PaymentComponent implements AfterViewInit {\n  params = new Map();\n  dataToSign : string = '';\n  constructor( private datePipe: DatePipe) {}\n\n  ngAfterViewInit() {\n    this.postToCyberSource();\n  }\n  // create a form for the post request\n  postToCyberSource(): void {\n    this.dateString();\n    const form = window.document.createElement('form');\n    form.setAttribute('method', 'post');\n    form.setAttribute('action', environment.endpoint);   \n    form.setAttribute('target', 'sa_iframe');\n\n    // Add all the data to be posted as Hidden elements    \n    form.appendChild(this.createHiddenElement('access_key', environment.accessKey));\n    form.appendChild(this.createHiddenElement('profile_id', environment.profileId));\n    form.appendChild(this.createHiddenElement('transaction_uuid', this.uuid(16)));\n    form.appendChild(this.createHiddenElement('signed_field_names', environment.signedFieldNames));\n    form.appendChild(this.createHiddenElement('unsigned_field_names', environment.unsignedFieldNames));\n    form.appendChild(this.createHiddenElement('signed_date_time', this.dateString()));\n    form.appendChild(this.createHiddenElement('locale', 'en-US'));\n    form.appendChild(this.createHiddenElement('transaction_type', environment.transactionType));\n    form.appendChild(this.createHiddenElement('reference_number', '123456789'));\n    form.appendChild(this.createHiddenElement('amount', '25'));    \n    form.appendChild(this.createHiddenElement('currency', 'usd'));           \n    form.appendChild(this.createHiddenElement('signature', this.sign()));        \n    window.document.body.appendChild(form);\n    form.submit();\n  }\n  \n\n  // create the form\n  private createHiddenElement(name: string, value: string): HTMLInputElement {\n    const hiddenField = document.createElement('input');\n    hiddenField.setAttribute('name', name);\n    hiddenField.setAttribute('value', value);\n    hiddenField.setAttribute('type', 'hidden');\n    this.params.set(name, value);\n    this.dataToSign += name + \"=\" + value + \",\"\n    return hiddenField;\n  }\n\n  private dateString(): string {\n    const activationDate = this.getNowUTC();\n    return this.datePipe.transform(activationDate, 'yyyy-MM-ddTHH:mm:ss') + \"Z\";\n  }\n\n  private getNowUTC() {\n    const now = new Date();\n    return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));\n  }\n\n  public sign(): string {\n    this.dataToSign = this.dataToSign.substring(0, this.dataToSign.length - 1);        \n    return this.signData(this.dataToSign, environment.SECRET_KEY);\n  }\n\n  public signData(data: string, secretKey: string): string {\n      const signatureString = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);      \n      return signatureString;\n  }\n\n  private uuid(lengthOfCode: number) {\n    const possible = \"abcde1234567890\";\n    let text = \"\";\n    for (let i = 0; i < lengthOfCode; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n      return text;\n  }\n\n}\n","<iframe name=\"sa_iframe\" src=\"assets/iframe.jpg\" id=\"sa_iframe\" height=\"430\" width=\"600\" scrolling=\"yes\"></iframe> "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}